<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MotionIntegrationCLS</name>
    </assembly>
    <members>
        <member name="T:Ttp.Meteor.MotionIntegration.MMI_Consts">
            <summary>
            Definition of constant values for Meteor Motion Integration
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.KVer_MMI_Interface">
            <summary>Current version of the MMI interface.  An MMI plugin must report this in the upper 16 bits of the version number set by MMI_GetInterfaceVersion.</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_Motors">
            <summary>Features bit set if the plugin supports motors</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_InkPumps">
            <summary>Features bit set if the plugin supports ink supply pumps</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_PurgePump">
            <summary>Features bit set if the plugin supports purge pump control</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_VacuumPump">
            <summary>Features bit set if the plugin supports a meniscus pump</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_All_Pumps">
            <summary>Combination of ink, purge and vacuum pumps</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_Alarm">
            <summary>Features bit set if the plugin supports an alarm device</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_MediaSense">
            <summary>Features bit set if the plugin supports media position sensing using the DEV_MediaSense pseudo-device</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_UVLamp">
            <summary>Features bit set if the plugin supports UV lamp control</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_PressureSensor">
            <summary>Features bit set if the plugin supports pressure sensor</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_ContininuousMovement">
            <summary>Features bit set if the plugin supports continuous movement on axis</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_PresenceDetector">
            <summary>Features bit set if the plugin supports presence detector device such as light curtain</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_JobSequenceQueue">
            <summary>Feature bit set if the plugin supports the job sequence queue methods (see IJobMotionQueue)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_Consts.MMI_Feature_Keyboard">
            <summary> Feature bit set if the plugin supports external buttons </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.LogDelegate">
            <summary>
            Defines the function type which can be sent to an MMI plugin to allow it to send diagnostic messages back to the controlling
            application (i.e. MetScan), which should also write them into log files.
            </summary>
            <param name="item">A new log message</param>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.IMotion">
            <summary>
            Interface which a plugin supporting the Meteor Motion Integration (MMI) API must support
            All methods defined in this interface must have a return type of eMotionResult
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            <para>
             Purpose: This function returns an interface / dll implementation version and reports the high level features supported by the plugin
            </para>
            <para>
            When called:
             Called at any time.  Note that MMI_GetInterfaceVersion can be called before MMI_Initialise.
            </para>
            </summary>
            <param name="aVersion">Lower 16 bits are a plugin specific version number.  Upper 16 bits must be MMI_Consts.KVer_MMI_Interface</param>
            <param name="aFeaturesSupported">Set with MMI_Feature_XXX bits to report the high level features supported by the plugin</param>
            <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_Initialise(System.String)">
            <summary>
            <para>
            Purpose:
            Connect to hardware, read parameters from config file, set everything up.
            </para>
            <para>
            When called:
            Called when the application is first started.
            </para>
            <para>
            Notes:
            Calling it when the motion controller is already initialised just re-initialises everything and is
            equivalent to calling ShutDown() + Initialise()
            </para>
            </summary>
            <param name="cfgFilePath">For future use, currently MetScan will always send an empty string</param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_ShutDown">
            <summary>
            <para>
            Purpose:
            Wind down and disconnect the hardware cleanly. Also shuts down all hardware, like motors, pumps etc.
            </para>
            <para>
            When called:
            Called at the end of the application. 
            </para>
            </summary>
            <returns>
            MotionResult.MRES_OK only. The shutdown process can not prevent the application from  stopping.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            <para>
            Purpose:
            Go through a homing routine to find the limit switches.
            </para>
            <para>
            When called:
            - when the application is first started, after Initialise.
            - occasionally during normal operation, to rehome on the limit switches.
            </para>
            <para>
            Notes:
            Can block the current thread if necessary.
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis </param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_BUSY if the print carriage is already moving.
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            <para>
             Purpose:
             This function will send the print carriage to the designated position in mm.
             The position can be either relative to current or absolute. 
             For absolute position homing sequence (see MoveHome()) should have been performed before, otherwise
             this API call will fail.
            </para>
            <para>
             When called:
             Called whenever the application wants the printer carriage to move to print a swath.
            </para>
            <para>
            </para>
             Notes:
             This function should start the motion sequence and then return. It should not block while the axis is moving.
                  The application will poll MoveStatus to find out when the move has completed.
            
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvOpt"> specifies type of movement</param>
            <param name="aDist_mm"> distance in mm absolute or relative  </param>
            <returns>
            MotionResult.MRES_OK        if the motion sequence is starting.
            MotionResult.MRES_INTERRUPT if the motion was cancelled.
            MotionResult.MRES_BUSY      if the print carriage is already moving.
            MotionResult.MRES_FAULT     for an unrecoverable fault.
            MotionResult.MRES_NOTINIT   if the motion controller is not initialised. 
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            <para>
            Purpose:
            If some motor is busy executing MoveTo() or MoveHome(), the print carriage will be stopped.
            Also used as a general cancel for any non-axis movement which the plugin may be controlling, 
            with <paramref name="aAxis"/>> set to <see cref="F:Ttp.Meteor.MotionIntegration.eMotionAxis.AxisNone"/>
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis, or AxisNone (0) to cancel generic non-axis movement (if any)</param>
            <param name="aOption"> movement cancel option</param>
            <returns>
            MRES_OK       if the Cancel sequence was started.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            <para>
            Purpose:
            Get status of the specified axis.
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvStat"> out: axis state. </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   wrong parameters.
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMoveStat.structSize"/> field is incorrect
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            <para>
             Purpose:
             Set motor moving speed. In theory, this command may need to be sent before every MoveTo().
            </para>
            <para>
             Notes: If there is an attempt to set a speed which is lower than the minimum allowed axis speed, the function
             should set the speed to the minimum allowed and return eMotionResult.MRES_BADPARAM. 
             If there is an attempt to set a speed which is higher than the maximum allowed axis speed, the function
             should set the speed to the maximum allowed and return eMotionResult.MRES_BADPARAM. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis</param>
            <param name="aOpt"> specifies function (set speed, or reset to default) </param>
            <param name="aSpeed_mm_s"> desired speed, mm/s </param>
            <returns>
            MRES_OK       on success.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            <para>
             Purpose: This API should be used to set state of various hardware devices, like
             valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.  if 0 it means "all devices." API will make the best effort to apply given state to all devices in a group. E.g "toggle off all LEDs"</param>
            <param name="aState"> device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.  </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            <para>
             Purpose: This API should be used to get status of some devices, like valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.</param>
            <param name="apState"> out: device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.   </param>
            <returns>
            MRES_OK       if a valid device state is set in <paramref name="apState"/>.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             <para>
              Purpose:  A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
               depends on command, options etc.
               
             Similar to <see cref="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)"/>, and mostly deprecated.
            
             MMI_GenericControl is only used by MetScan for <see cref="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SetDevVoltage"/>, with aOption set to
             <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_InkPump"/> to set the PWM voltage for all ink pumps, or <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_VacPump"/>
             to set the PWM voltage for the vacuum pump.  In both these cases, aParam contains just a single value, which is the PWM
             percentage to use.
            
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of 32-bit DWORDs in the aParam array</param>
             <param name="aParam">Command specific data</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
             <summary>
             <para>
              Purpose: A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
              depends on command, options etc.
            
              Similar to <see cref="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])"/>, this version takes a string as the parameter, and is the
              version used for most MetScan commands.
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of characters in the aParam string.</param>
             <param name="aParam">Command parameters, normally a JSON string.</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.ILoggable">
            <summary>
            Interface to extend IMotion to allow logging through a delegate.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.ILoggable.MMI_SetLoggingDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            <para>Called during startup if (a) the plugin implements the ILoggable interface in the same object as IMotion, and (b) the server 
                  is run with the 'setMmiLogDelgate' flag set (or -ml on the SwathIPCServer.exe command line).</para>
            <para>N.B. The method is called on startup, before 'GetInterfaceVersion' and 'Initialise'.</para>
            <para>Installs a callback function the plugin can use to route log messages back to the MMI framework (and hence into log files).</para>
            <para>An unmanaged MMI plugin must export a 'SetLogDelegate' function to enable this functionality.</para>
            </summary>
            <param name="logDelegate">Delegate the plugin can use for log messages.</param>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.IJobMotionQueue">
            <summary>
            Optional interface for Meteor Motion Integration implementations which implement a printing movement queue.
            An MMI implementation which supports IJobMotionQueue should set the MMI_Feature_JobMotionQueue bit in MMI_GetInterfaceVersion.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IJobMotionQueue.MMI_JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Put the MMI into job queue mode
            </summary>
            <param name="aParams">For future use: parameters for setting up the job queue.  Should currently be ignored.</param>
            <param name="aAdditionalParams">For future use: additional custom JSON parameters for setting up the job queue.  Should currently be ignored.</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_ACTIVE if the job sequence queue is already active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IJobMotionQueue.MMI_JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            <para>Exit job queue mode, either immediately or after the current in-progress move (if any) has completed, according to
                  the value of the aOption parameter.</para>
            <para>- JobSeqStop_CompleteMove means complete the current movement before stopping the job queue.</para>
            <para>- JobSeqStop_CancelNormal means cancel the current movement gracefully before stopping the job queue.</para>
            <para>- JobSeqStop_CancelUrgent means cancel all movement as soon as possible (crash stop).</para>
            <para> All remaining commands in the queue should then be discarded.</para>
            <para>** N.B. It is valid to call JobSequenceStop even if job sequence mode is not currently active, in which case it should just return MRES_OK **</para>
            <para>** N.B. During normal print job operation, the queue is stopped by setting the JobMotionQueueCmd_StopAfterMove flag for the final
                          move, rather than using MMI_JobSequenceStop ** </para>
            </summary>
            <param name="aOption">Defines how the stop should be carried out</param>
            <returns>
            MRES_OK on success; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IJobMotionQueue.MMI_JobSequencePause">
            <summary>
            Pause the MMI job queue after the current in-progress move (if any) has completed.
            <para>Once the pause is complete and the X and Y axes are both idle, the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.PauseCount"/> must be incremented.
                  The increment must only happen once the queue is fully paused and the MMI is able to accept standard Move commands.</para>
            <para>The MMI must maintain the queue position for a subsequent resume.</para>
            <para>Additional commands can be added to the queue via MMI_JobSequenceQueueMove while it is paused</para>
            <para>** N.B. A pause can also happen automatically at the end of a swath if the JobMotionQueueCmd_PauseAfterMove bit is set in
                          TMotionQueueMoveArgs.ControlFlags **</para>
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active;
            MRES_JOB_SEQ_QUEUE_ALREADY_PAUSED if the job sequence queue is already paused;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IJobMotionQueue.MMI_JobSequenceResume">
            <summary>
            Resume the job queue movements from the point where the queue was paused.
            A pause is started by either (a) a call to MMI_JobSequencePause, or (b) the end of a swath which has the JobMotionQueueCmd_PauseAfterMove bit set 
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active;
            MRES_JOB_SEQ_QUEUE_NOT_PAUSED if the job sequence queue is not paused;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IJobMotionQueue.MMI_JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Queue the next swath movement for the job.
            <para>** N.B. Swath commands can be added while the job sequence queue is paused **</para>
            <para>It is important that the motion system does not begin the movement for a swath until the print data for that swath is fully
                   buffered in the Meteor Print Controller Card (PCC) hardware.</para>
            <para>Therefore MetScan will queue the movement required for a swath only after the print data has been fully loaded into the Meteor hardware.</para>  
            <para>The number of swath movement commands which can be queued in advance depends on the image size and amount of PCC memory available 
                  per head in the printer configuration.  Normally it is possible to fit several swaths in PCC memory.</para>
            <para>N.B. MetScan has modes such as "Trim Blank X Edges of Swath" which mean that the movement required for each swath in a print job can 
                  be dependent on the image content.</para>
            </summary>
            <param name="aParams">Details of the X/Y movement</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active;
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.StructureSizeBytes"/> field is incorrect;
            MRES_JOB_SEQ_QUEUE_FULL if the maximum number of queued commands has been reached on the PLC.  MetScan will retry sending the command later.
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.IJobMotionQueue.MMI_GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Retrieve the current job sequence status.
            <para>** N.B. It is valid to call this method whether or not the MMI has been put into job sequence mode **</para>
            <para>** N.B. MMI_MoveStatus must continue to report the status of each axis while job sequence mode is active</para>
            <para>  i.e. The X and Y axes must report AxS_Busy when the axis is carrying out a queued movement, otherwise AxS_Idle **</para>
            </summary>
            <param name="aParams">Filled in with the current job sequence status</param>
            <returns>
            MRES_OK on success; 
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.Meteor_MPC">
            <summary>
            Meteor Motion Integration framework object which implements the IMotion interface for calling into the
            unmanaged module Meteor_MPC.dll
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            <para>
             Purpose: This function returns an interface / dll implementation version and reports the high level features supported by the plugin
            </para>
            <para>
            When called:
             Called at any time.  Note that MMI_GetInterfaceVersion can be called before MMI_Initialise.
            </para>
            </summary>
            <param name="aVersion">Lower 16 bits are a plugin specific version number.  Upper 16 bits must be MMI_Consts.KVer_MMI_Interface</param>
            <param name="aFeaturesSupported">Set with MMI_Feature_XXX bits to report the high level features supported by the plugin</param>
            <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_Initialise(System.String)">
            <summary>
            <para>
            Purpose:
            Connect to hardware, read parameters from config file, set everything up.
            </para>
            <para>
            When called:
            Called when the application is first started.
            </para>
            <para>
            Notes:
            Calling it when the motion controller is already initialised just re-initialises everything and is
            equivalent to calling ShutDown() + Initialise()
            </para>
            </summary>
            <param name="cfgFilePath">For future use, currently MetScan will always send an empty string</param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_ShutDown">
            <summary>
            <para>
            Purpose:
            Wind down and disconnect the hardware cleanly. Also shuts down all hardware, like motors, pumps etc.
            </para>
            <para>
            When called:
            Called at the end of the application. 
            </para>
            </summary>
            <returns>
            MotionResult.MRES_OK only. The shutdown process can not prevent the application from  stopping.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            <para>
            Purpose:
            Go through a homing routine to find the limit switches.
            </para>
            <para>
            When called:
            - when the application is first started, after Initialise.
            - occasionally during normal operation, to rehome on the limit switches.
            </para>
            <para>
            Notes:
            Can block the current thread if necessary.
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis </param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_BUSY if the print carriage is already moving.
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            <para>
             Purpose:
             This function will send the print carriage to the designated position in mm.
             The position can be either relative to current or absolute. 
             For absolute position homing sequence (see MoveHome()) should have been performed before, otherwise
             this API call will fail.
            </para>
            <para>
             When called:
             Called whenever the application wants the printer carriage to move to print a swath.
            </para>
            <para>
            </para>
             Notes:
             This function should start the motion sequence and then return. It should not block while the axis is moving.
                  The application will poll MoveStatus to find out when the move has completed.
            
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvOpt"> specifies type of movement</param>
            <param name="aDist_mm"> distance in mm absolute or relative  </param>
            <returns>
            MotionResult.MRES_OK        if the motion sequence is starting.
            MotionResult.MRES_INTERRUPT if the motion was cancelled.
            MotionResult.MRES_BUSY      if the print carriage is already moving.
            MotionResult.MRES_FAULT     for an unrecoverable fault.
            MotionResult.MRES_NOTINIT   if the motion controller is not initialised. 
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            <para>
            Purpose:
            If some motor is busy executing MoveTo() or MoveHome(), the print carriage will be stopped.
            Also used as a general cancel for any non-axis movement which the plugin may be controlling, 
            with <paramref name="aAxis"/>> set to <see cref="F:Ttp.Meteor.MotionIntegration.eMotionAxis.AxisNone"/>
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis, or AxisNone (0) to cancel generic non-axis movement (if any)</param>
            <param name="aOption"> movement cancel option</param>
            <returns>
            MRES_OK       if the Cancel sequence was started.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            <para>
            Purpose:
            Get status of the specified axis.
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvStat"> out: axis state. </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   wrong parameters.
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMoveStat.structSize"/> field is incorrect
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            <para>
             Purpose:
             Set motor moving speed. In theory, this command may need to be sent before every MoveTo().
            </para>
            <para>
             Notes: If there is an attempt to set a speed which is lower than the minimum allowed axis speed, the function
             should set the speed to the minimum allowed and return eMotionResult.MRES_BADPARAM. 
             If there is an attempt to set a speed which is higher than the maximum allowed axis speed, the function
             should set the speed to the maximum allowed and return eMotionResult.MRES_BADPARAM. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis</param>
            <param name="aOpt"> specifies function (set speed, or reset to default) </param>
            <param name="aSpeed_mm_s"> desired speed, mm/s </param>
            <returns>
            MRES_OK       on success.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            <para>
             Purpose: This API should be used to set state of various hardware devices, like
             valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.  if 0 it means "all devices." API will make the best effort to apply given state to all devices in a group. E.g "toggle off all LEDs"</param>
            <param name="aState"> device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.  </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            <para>
             Purpose: This API should be used to get status of some devices, like valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.</param>
            <param name="apState"> out: device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.   </param>
            <returns>
            MRES_OK       if a valid device state is set in <paramref name="apState"/>.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             <para>
              Purpose:  A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
               depends on command, options etc.
               
             Similar to <see cref="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)"/>, and mostly deprecated.
            
             MMI_GenericControl is only used by MetScan for <see cref="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SetDevVoltage"/>, with aOption set to
             <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_InkPump"/> to set the PWM voltage for all ink pumps, or <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_VacPump"/>
             to set the PWM voltage for the vacuum pump.  In both these cases, aParam contains just a single value, which is the PWM
             percentage to use.
            
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of 32-bit DWORDs in the aParam array</param>
             <param name="aParam">Command specific data</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
             <summary>
             <para>
              Purpose: A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
              depends on command, options etc.
            
              Similar to <see cref="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])"/>, this version takes a string as the parameter, and is the
              version used for most MetScan commands.
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of characters in the aParam string.</param>
             <param name="aParam">Command parameters, normally a JSON string.</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_SetLoggingDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            Means to apply logging delegate to Unmanaged library.
            N.B. this may not exist in all versions, in which case an EntryPointNotFoundException will be handled - preventing a 
                 breaking change to the DLL header interface.
            </summary>
            <param name="logDelegate"></param>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Put the MMI into job queue mode
            </summary>
            <param name="aParams">For future use: parameters for setting up the job queue.  Should currently be ignored.</param>
            <param name="aAdditionalParams">For future use: additional custom JSON parameters for setting up the job queue.  Should currently be ignored.</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_ACTIVE if the job sequence queue is already active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            <para>Exit job queue mode, either immediately or after the current in-progress move (if any) has completed, according to
                  the value of the aOption parameter.</para>
            <para>- JobSeqStop_CompleteMove means complete the current movement before stopping the job queue.</para>
            <para>- JobSeqStop_CancelNormal means cancel the current movement gracefully before stopping the job queue.</para>
            <para>- JobSeqStop_CancelUrgent means cancel all movement as soon as possible (crash stop).</para>
            <para> All remaining commands in the queue should then be discarded.</para>
            <para>** N.B. It is valid to call JobSequenceStop even if job sequence mode is not currently active, in which case it should just return MRES_OK **</para>
            <para>** N.B. During normal print job operation, the queue is stopped by setting the JobMotionQueueCmd_StopAfterMove flag for the final
                          move, rather than using MMI_JobSequenceStop ** </para>
            </summary>
            <param name="aOption">Defines how the stop should be carried out</param>
            <returns>
            MRES_OK on success; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_JobSequencePause">
            <summary>
            Pause the MMI job queue after the current in-progress move (if any) has completed.
            <para>Once the pause is complete and the X and Y axes are both idle, the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.PauseCount"/> must be incremented.
                  The increment must only happen once the queue is fully paused and the MMI is able to accept standard Move commands.</para>
            <para>The MMI must maintain the queue position for a subsequent resume.</para>
            <para>Additional commands can be added to the queue via MMI_JobSequenceQueueMove while it is paused</para>
            <para>** N.B. A pause can also happen automatically at the end of a swath if the JobMotionQueueCmd_PauseAfterMove bit is set in
                          TMotionQueueMoveArgs.ControlFlags **</para>
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_JobSequenceResume">
            <summary>
            Resume the job queue movements from the point where the queue was paused.
            A pause is started by either (a) a call to MMI_JobSequencePause, or (b) the end of a swath which has the JobMotionQueueCmd_PauseAfterMove bit set 
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Queue the next swath movement for the job.
            <para>** N.B. Swath commands can be added while the job sequence queue is paused **</para>
            <para>It is important that the motion system does not begin the movement for a swath until the print data for that swath is fully
                   buffered in the Meteor Print Controller Card (PCC) hardware.</para>
            <para>Therefore MetScan will queue the movement required for a swath only after the print data has been fully loaded into the Meteor hardware.</para>  
            <para>The number of swath movement commands which can be queued in advance depends on the image size and amount of PCC memory available 
                  per head in the printer configuration.  Normally it is possible to fit several swaths in PCC memory.</para>
            <para>N.B. MetScan has modes such as "Trim Blank X Edges of Swath" which mean that the movement required for each swath in a print job can 
                  be dependent on the image content.</para>
            </summary>
            <param name="aParams">Details of the X/Y movement</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active;
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.Meteor_MPC.MMI_GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Retrieve the current job sequence status.
            <para>** N.B. It is valid to call this method whether or not the MMI has been put into job sequence mode **</para>
            <para>** N.B. MMI_MoveStatus must continue to report the status of each axis while job sequence mode is active</para>
            <para>  i.e. The X and Y axes must report AxS_Busy when the axis is carrying out a queued movement, otherwise AxS_Idle **</para>
            </summary>
            <param name="aParams">Filled in with the current job sequence status</param>
            <returns>
            MRES_OK on success; 
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.MotionController">
            <summary>
            Meteor Motion Integration framework object which implements the IMotion interface for calling into the
            unmanaged module MotionController.dll
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            <para>
             Purpose: This function returns an interface / dll implementation version and reports the high level features supported by the plugin
            </para>
            <para>
            When called:
             Called at any time.  Note that MMI_GetInterfaceVersion can be called before MMI_Initialise.
            </para>
            </summary>
            <param name="aVersion">Lower 16 bits are a plugin specific version number.  Upper 16 bits must be MMI_Consts.KVer_MMI_Interface</param>
            <param name="aFeaturesSupported">Set with MMI_Feature_XXX bits to report the high level features supported by the plugin</param>
            <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_Initialise(System.String)">
            <summary>
            <para>
            Purpose:
            Connect to hardware, read parameters from config file, set everything up.
            </para>
            <para>
            When called:
            Called when the application is first started.
            </para>
            <para>
            Notes:
            Calling it when the motion controller is already initialised just re-initialises everything and is
            equivalent to calling ShutDown() + Initialise()
            </para>
            </summary>
            <param name="cfgFilePath">For future use, currently MetScan will always send an empty string</param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_ShutDown">
            <summary>
            <para>
            Purpose:
            Wind down and disconnect the hardware cleanly. Also shuts down all hardware, like motors, pumps etc.
            </para>
            <para>
            When called:
            Called at the end of the application. 
            </para>
            </summary>
            <returns>
            MotionResult.MRES_OK only. The shutdown process can not prevent the application from  stopping.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            <para>
            Purpose:
            Go through a homing routine to find the limit switches.
            </para>
            <para>
            When called:
            - when the application is first started, after Initialise.
            - occasionally during normal operation, to rehome on the limit switches.
            </para>
            <para>
            Notes:
            Can block the current thread if necessary.
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis </param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_BUSY if the print carriage is already moving.
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            <para>
             Purpose:
             This function will send the print carriage to the designated position in mm.
             The position can be either relative to current or absolute. 
             For absolute position homing sequence (see MoveHome()) should have been performed before, otherwise
             this API call will fail.
            </para>
            <para>
             When called:
             Called whenever the application wants the printer carriage to move to print a swath.
            </para>
            <para>
            </para>
             Notes:
             This function should start the motion sequence and then return. It should not block while the axis is moving.
                  The application will poll MoveStatus to find out when the move has completed.
            
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvOpt"> specifies type of movement</param>
            <param name="aDist_mm"> distance in mm absolute or relative  </param>
            <returns>
            MotionResult.MRES_OK        if the motion sequence is starting.
            MotionResult.MRES_INTERRUPT if the motion was cancelled.
            MotionResult.MRES_BUSY      if the print carriage is already moving.
            MotionResult.MRES_FAULT     for an unrecoverable fault.
            MotionResult.MRES_NOTINIT   if the motion controller is not initialised. 
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            <para>
            Purpose:
            If some motor is busy executing MoveTo() or MoveHome(), the print carriage will be stopped.
            Also used as a general cancel for any non-axis movement which the plugin may be controlling, 
            with <paramref name="aAxis"/>> set to <see cref="F:Ttp.Meteor.MotionIntegration.eMotionAxis.AxisNone"/>
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis, or AxisNone (0) to cancel generic non-axis movement (if any)</param>
            <param name="aOption"> movement cancel option</param>
            <returns>
            MRES_OK       if the Cancel sequence was started.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            <para>
            Purpose:
            Get status of the specified axis.
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvStat"> out: axis state. </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   wrong parameters.
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMoveStat.structSize"/> field is incorrect
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            <para>
             Purpose:
             Set motor moving speed. In theory, this command may need to be sent before every MoveTo().
            </para>
            <para>
             Notes: If there is an attempt to set a speed which is lower than the minimum allowed axis speed, the function
             should set the speed to the minimum allowed and return eMotionResult.MRES_BADPARAM. 
             If there is an attempt to set a speed which is higher than the maximum allowed axis speed, the function
             should set the speed to the maximum allowed and return eMotionResult.MRES_BADPARAM. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis</param>
            <param name="aOpt"> specifies function (set speed, or reset to default) </param>
            <param name="aSpeed_mm_s"> desired speed, mm/s </param>
            <returns>
            MRES_OK       on success.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            <para>
             Purpose: This API should be used to set state of various hardware devices, like
             valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.  if 0 it means "all devices." API will make the best effort to apply given state to all devices in a group. E.g "toggle off all LEDs"</param>
            <param name="aState"> device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.  </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            <para>
             Purpose: This API should be used to get status of some devices, like valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.</param>
            <param name="apState"> out: device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.   </param>
            <returns>
            MRES_OK       if a valid device state is set in <paramref name="apState"/>.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             <para>
              Purpose:  A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
               depends on command, options etc.
               
             Similar to <see cref="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)"/>, and mostly deprecated.
            
             MMI_GenericControl is only used by MetScan for <see cref="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SetDevVoltage"/>, with aOption set to
             <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_InkPump"/> to set the PWM voltage for all ink pumps, or <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_VacPump"/>
             to set the PWM voltage for the vacuum pump.  In both these cases, aParam contains just a single value, which is the PWM
             percentage to use.
            
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of 32-bit DWORDs in the aParam array</param>
             <param name="aParam">Command specific data</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
             <summary>
             <para>
              Purpose: A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
              depends on command, options etc.
            
              Similar to <see cref="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])"/>, this version takes a string as the parameter, and is the
              version used for most MetScan commands.
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of characters in the aParam string.</param>
             <param name="aParam">Command parameters, normally a JSON string.</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_SetLoggingDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            Means to apply logging delegate to Unmanaged library.
            N.B. this may not exist in all versions, in which case an EntryPointNotFoundException will be handled - preventing a 
                 breaking change to the DLL header interface.
            </summary>
            <param name="logDelegate"></param>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Put the MMI into job queue mode
            </summary>
            <param name="aParams">For future use: parameters for setting up the job queue.  Should currently be ignored.</param>
            <param name="aAdditionalParams">For future use: additional custom JSON parameters for setting up the job queue.  Should currently be ignored.</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_ACTIVE if the job sequence queue is already active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            <para>Exit job queue mode, either immediately or after the current in-progress move (if any) has completed, according to
                  the value of the aOption parameter.</para>
            <para>- JobSeqStop_CompleteMove means complete the current movement before stopping the job queue.</para>
            <para>- JobSeqStop_CancelNormal means cancel the current movement gracefully before stopping the job queue.</para>
            <para>- JobSeqStop_CancelUrgent means cancel all movement as soon as possible (crash stop).</para>
            <para> All remaining commands in the queue should then be discarded.</para>
            <para>** N.B. It is valid to call JobSequenceStop even if job sequence mode is not currently active, in which case it should just return MRES_OK **</para>
            <para>** N.B. During normal print job operation, the queue is stopped by setting the JobMotionQueueCmd_StopAfterMove flag for the final
                          move, rather than using MMI_JobSequenceStop ** </para>
            </summary>
            <param name="aOption">Defines how the stop should be carried out</param>
            <returns>
            MRES_OK on success; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_JobSequencePause">
            <summary>
            Pause the MMI job queue after the current in-progress move (if any) has completed.
            <para>Once the pause is complete and the X and Y axes are both idle, the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.PauseCount"/> must be incremented.
                  The increment must only happen once the queue is fully paused and the MMI is able to accept standard Move commands.</para>
            <para>The MMI must maintain the queue position for a subsequent resume.</para>
            <para>Additional commands can be added to the queue via MMI_JobSequenceQueueMove while it is paused</para>
            <para>** N.B. A pause can also happen automatically at the end of a swath if the JobMotionQueueCmd_PauseAfterMove bit is set in
                          TMotionQueueMoveArgs.ControlFlags **</para>
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_JobSequenceResume">
            <summary>
            Resume the job queue movements from the point where the queue was paused.
            A pause is started by either (a) a call to MMI_JobSequencePause, or (b) the end of a swath which has the JobMotionQueueCmd_PauseAfterMove bit set 
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Queue the next swath movement for the job.
            <para>** N.B. Swath commands can be added while the job sequence queue is paused **</para>
            <para>It is important that the motion system does not begin the movement for a swath until the print data for that swath is fully
                   buffered in the Meteor Print Controller Card (PCC) hardware.</para>
            <para>Therefore MetScan will queue the movement required for a swath only after the print data has been fully loaded into the Meteor hardware.</para>  
            <para>The number of swath movement commands which can be queued in advance depends on the image size and amount of PCC memory available 
                  per head in the printer configuration.  Normally it is possible to fit several swaths in PCC memory.</para>
            <para>N.B. MetScan has modes such as "Trim Blank X Edges of Swath" which mean that the movement required for each swath in a print job can 
                  be dependent on the image content.</para>
            </summary>
            <param name="aParams">Details of the X/Y movement</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active;
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MotionController.MMI_GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Retrieve the current job sequence status.
            <para>** N.B. It is valid to call this method whether or not the MMI has been put into job sequence mode **</para>
            <para>** N.B. MMI_MoveStatus must continue to report the status of each axis while job sequence mode is active</para>
            <para>  i.e. The X and Y axes must report AxS_Busy when the axis is carrying out a queued movement, otherwise AxS_Idle **</para>
            </summary>
            <param name="aParams">Filled in with the current job sequence status</param>
            <returns>
            MRES_OK on success; 
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.MMITest">
            <summary>
            Meteor Motion Integration framework object which implements the IMotion interface for calling into the
            unmanaged module MMITest.dll
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            <para>
             Purpose: This function returns an interface / dll implementation version and reports the high level features supported by the plugin
            </para>
            <para>
            When called:
             Called at any time.  Note that MMI_GetInterfaceVersion can be called before MMI_Initialise.
            </para>
            </summary>
            <param name="aVersion">Lower 16 bits are a plugin specific version number.  Upper 16 bits must be MMI_Consts.KVer_MMI_Interface</param>
            <param name="aFeaturesSupported">Set with MMI_Feature_XXX bits to report the high level features supported by the plugin</param>
            <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_Initialise(System.String)">
            <summary>
            <para>
            Purpose:
            Connect to hardware, read parameters from config file, set everything up.
            </para>
            <para>
            When called:
            Called when the application is first started.
            </para>
            <para>
            Notes:
            Calling it when the motion controller is already initialised just re-initialises everything and is
            equivalent to calling ShutDown() + Initialise()
            </para>
            </summary>
            <param name="cfgFilePath">For future use, currently MetScan will always send an empty string</param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_ShutDown">
            <summary>
            <para>
            Purpose:
            Wind down and disconnect the hardware cleanly. Also shuts down all hardware, like motors, pumps etc.
            </para>
            <para>
            When called:
            Called at the end of the application. 
            </para>
            </summary>
            <returns>
            MotionResult.MRES_OK only. The shutdown process can not prevent the application from  stopping.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            <para>
            Purpose:
            Go through a homing routine to find the limit switches.
            </para>
            <para>
            When called:
            - when the application is first started, after Initialise.
            - occasionally during normal operation, to rehome on the limit switches.
            </para>
            <para>
            Notes:
            Can block the current thread if necessary.
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis </param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_BUSY if the print carriage is already moving.
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            <para>
             Purpose:
             This function will send the print carriage to the designated position in mm.
             The position can be either relative to current or absolute. 
             For absolute position homing sequence (see MoveHome()) should have been performed before, otherwise
             this API call will fail.
            </para>
            <para>
             When called:
             Called whenever the application wants the printer carriage to move to print a swath.
            </para>
            <para>
            </para>
             Notes:
             This function should start the motion sequence and then return. It should not block while the axis is moving.
                  The application will poll MoveStatus to find out when the move has completed.
            
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvOpt"> specifies type of movement</param>
            <param name="aDist_mm"> distance in mm absolute or relative  </param>
            <returns>
            MotionResult.MRES_OK        if the motion sequence is starting.
            MotionResult.MRES_INTERRUPT if the motion was cancelled.
            MotionResult.MRES_BUSY      if the print carriage is already moving.
            MotionResult.MRES_FAULT     for an unrecoverable fault.
            MotionResult.MRES_NOTINIT   if the motion controller is not initialised. 
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            <para>
            Purpose:
            If some motor is busy executing MoveTo() or MoveHome(), the print carriage will be stopped.
            Also used as a general cancel for any non-axis movement which the plugin may be controlling, 
            with <paramref name="aAxis"/>> set to <see cref="F:Ttp.Meteor.MotionIntegration.eMotionAxis.AxisNone"/>
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis, or AxisNone (0) to cancel generic non-axis movement (if any)</param>
            <param name="aOption"> movement cancel option</param>
            <returns>
            MRES_OK       if the Cancel sequence was started.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            <para>
            Purpose:
            Get status of the specified axis.
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvStat"> out: axis state. </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   wrong parameters.
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMoveStat.structSize"/> field is incorrect
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            <para>
             Purpose:
             Set motor moving speed. In theory, this command may need to be sent before every MoveTo().
            </para>
            <para>
             Notes: If there is an attempt to set a speed which is lower than the minimum allowed axis speed, the function
             should set the speed to the minimum allowed and return eMotionResult.MRES_BADPARAM. 
             If there is an attempt to set a speed which is higher than the maximum allowed axis speed, the function
             should set the speed to the maximum allowed and return eMotionResult.MRES_BADPARAM. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis</param>
            <param name="aOpt"> specifies function (set speed, or reset to default) </param>
            <param name="aSpeed_mm_s"> desired speed, mm/s </param>
            <returns>
            MRES_OK       on success.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            <para>
             Purpose: This API should be used to set state of various hardware devices, like
             valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.  if 0 it means "all devices." API will make the best effort to apply given state to all devices in a group. E.g "toggle off all LEDs"</param>
            <param name="aState"> device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.  </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            <para>
             Purpose: This API should be used to get status of some devices, like valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.</param>
            <param name="apState"> out: device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.   </param>
            <returns>
            MRES_OK       if a valid device state is set in <paramref name="apState"/>.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             <para>
              Purpose:  A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
               depends on command, options etc.
               
             Similar to <see cref="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)"/>, and mostly deprecated.
            
             MMI_GenericControl is only used by MetScan for <see cref="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SetDevVoltage"/>, with aOption set to
             <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_InkPump"/> to set the PWM voltage for all ink pumps, or <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_VacPump"/>
             to set the PWM voltage for the vacuum pump.  In both these cases, aParam contains just a single value, which is the PWM
             percentage to use.
            
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of 32-bit DWORDs in the aParam array</param>
             <param name="aParam">Command specific data</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
             <summary>
             <para>
              Purpose: A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
              depends on command, options etc.
            
              Similar to <see cref="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])"/>, this version takes a string as the parameter, and is the
              version used for most MetScan commands.
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of characters in the aParam string.</param>
             <param name="aParam">Command parameters, normally a JSON string.</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_SetLoggingDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            Means to apply logging delegate to Unmanaged library.
            N.B. this may not exist in all versions, in which case an EntryPointNotFoundException will be handled - preventing a 
                 breaking change to the DLL header interface.
            </summary>
            <param name="logDelegate"></param>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Put the MMI into job queue mode
            </summary>
            <param name="aParams">For future use: parameters for setting up the job queue.  Should currently be ignored.</param>
            <param name="aAdditionalParams">For future use: additional custom JSON parameters for setting up the job queue.  Should currently be ignored.</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_ACTIVE if the job sequence queue is already active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            <para>Exit job queue mode, either immediately or after the current in-progress move (if any) has completed, according to
                  the value of the aOption parameter.</para>
            <para>- JobSeqStop_CompleteMove means complete the current movement before stopping the job queue.</para>
            <para>- JobSeqStop_CancelNormal means cancel the current movement gracefully before stopping the job queue.</para>
            <para>- JobSeqStop_CancelUrgent means cancel all movement as soon as possible (crash stop).</para>
            <para> All remaining commands in the queue should then be discarded.</para>
            <para>** N.B. It is valid to call JobSequenceStop even if job sequence mode is not currently active, in which case it should just return MRES_OK **</para>
            <para>** N.B. During normal print job operation, the queue is stopped by setting the JobMotionQueueCmd_StopAfterMove flag for the final
                          move, rather than using MMI_JobSequenceStop ** </para>
            </summary>
            <param name="aOption">Defines how the stop should be carried out</param>
            <returns>
            MRES_OK on success; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_JobSequencePause">
            <summary>
            Pause the MMI job queue after the current in-progress move (if any) has completed.
            <para>Once the pause is complete and the X and Y axes are both idle, the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.PauseCount"/> must be incremented.
                  The increment must only happen once the queue is fully paused and the MMI is able to accept standard Move commands.</para>
            <para>The MMI must maintain the queue position for a subsequent resume.</para>
            <para>Additional commands can be added to the queue via MMI_JobSequenceQueueMove while it is paused</para>
            <para>** N.B. A pause can also happen automatically at the end of a swath if the JobMotionQueueCmd_PauseAfterMove bit is set in
                          TMotionQueueMoveArgs.ControlFlags **</para>
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_JobSequenceResume">
            <summary>
            Resume the job queue movements from the point where the queue was paused.
            A pause is started by either (a) a call to MMI_JobSequencePause, or (b) the end of a swath which has the JobMotionQueueCmd_PauseAfterMove bit set 
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Queue the next swath movement for the job.
            <para>** N.B. Swath commands can be added while the job sequence queue is paused **</para>
            <para>It is important that the motion system does not begin the movement for a swath until the print data for that swath is fully
                   buffered in the Meteor Print Controller Card (PCC) hardware.</para>
            <para>Therefore MetScan will queue the movement required for a swath only after the print data has been fully loaded into the Meteor hardware.</para>  
            <para>The number of swath movement commands which can be queued in advance depends on the image size and amount of PCC memory available 
                  per head in the printer configuration.  Normally it is possible to fit several swaths in PCC memory.</para>
            <para>N.B. MetScan has modes such as "Trim Blank X Edges of Swath" which mean that the movement required for each swath in a print job can 
                  be dependent on the image content.</para>
            </summary>
            <param name="aParams">Details of the X/Y movement</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active;
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.MMITest.MMI_GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Retrieve the current job sequence status.
            <para>** N.B. It is valid to call this method whether or not the MMI has been put into job sequence mode **</para>
            <para>** N.B. MMI_MoveStatus must continue to report the status of each axis while job sequence mode is active</para>
            <para>  i.e. The X and Y axes must report AxS_Busy when the axis is carrying out a queued movement, otherwise AxS_Idle **</para>
            </summary>
            <param name="aParams">Filled in with the current job sequence status</param>
            <returns>
            MRES_OK on success; 
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.PrintEngine">
            <summary>
            Meteor Motion Integration framework object which implements the IMotion interface for calling into the
            unmanaged module PrintEngine.dll
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            <para>
             Purpose: This function returns an interface / dll implementation version and reports the high level features supported by the plugin
            </para>
            <para>
            When called:
             Called at any time.  Note that MMI_GetInterfaceVersion can be called before MMI_Initialise.
            </para>
            </summary>
            <param name="aVersion">Lower 16 bits are a plugin specific version number.  Upper 16 bits must be MMI_Consts.KVer_MMI_Interface</param>
            <param name="aFeaturesSupported">Set with MMI_Feature_XXX bits to report the high level features supported by the plugin</param>
            <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_Initialise(System.String)">
            <summary>
            <para>
            Purpose:
            Connect to hardware, read parameters from config file, set everything up.
            </para>
            <para>
            When called:
            Called when the application is first started.
            </para>
            <para>
            Notes:
            Calling it when the motion controller is already initialised just re-initialises everything and is
            equivalent to calling ShutDown() + Initialise()
            </para>
            </summary>
            <param name="cfgFilePath">For future use, currently MetScan will always send an empty string</param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_ShutDown">
            <summary>
            <para>
            Purpose:
            Wind down and disconnect the hardware cleanly. Also shuts down all hardware, like motors, pumps etc.
            </para>
            <para>
            When called:
            Called at the end of the application. 
            </para>
            </summary>
            <returns>
            MotionResult.MRES_OK only. The shutdown process can not prevent the application from  stopping.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            <para>
            Purpose:
            Go through a homing routine to find the limit switches.
            </para>
            <para>
            When called:
            - when the application is first started, after Initialise.
            - occasionally during normal operation, to rehome on the limit switches.
            </para>
            <para>
            Notes:
            Can block the current thread if necessary.
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis </param>
            <returns>
            MotionResult.MRES_OK if successful. 
            MotionResult.MRES_BUSY if the print carriage is already moving.
            MotionResult.MRES_FAULT for an unrecoverable fault.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            <para>
             Purpose:
             This function will send the print carriage to the designated position in mm.
             The position can be either relative to current or absolute. 
             For absolute position homing sequence (see MoveHome()) should have been performed before, otherwise
             this API call will fail.
            </para>
            <para>
             When called:
             Called whenever the application wants the printer carriage to move to print a swath.
            </para>
            <para>
            </para>
             Notes:
             This function should start the motion sequence and then return. It should not block while the axis is moving.
                  The application will poll MoveStatus to find out when the move has completed.
            
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvOpt"> specifies type of movement</param>
            <param name="aDist_mm"> distance in mm absolute or relative  </param>
            <returns>
            MotionResult.MRES_OK        if the motion sequence is starting.
            MotionResult.MRES_INTERRUPT if the motion was cancelled.
            MotionResult.MRES_BUSY      if the print carriage is already moving.
            MotionResult.MRES_FAULT     for an unrecoverable fault.
            MotionResult.MRES_NOTINIT   if the motion controller is not initialised. 
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            <para>
            Purpose:
            If some motor is busy executing MoveTo() or MoveHome(), the print carriage will be stopped.
            Also used as a general cancel for any non-axis movement which the plugin may be controlling, 
            with <paramref name="aAxis"/>> set to <see cref="F:Ttp.Meteor.MotionIntegration.eMotionAxis.AxisNone"/>
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis, or AxisNone (0) to cancel generic non-axis movement (if any)</param>
            <param name="aOption"> movement cancel option</param>
            <returns>
            MRES_OK       if the Cancel sequence was started.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            <para>
            Purpose:
            Get status of the specified axis.
            </para>
            <para>
            When called:
            Can be called at any point. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis. </param>
            <param name="aMvStat"> out: axis state. </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   wrong parameters.
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMoveStat.structSize"/> field is incorrect
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            <para>
             Purpose:
             Set motor moving speed. In theory, this command may need to be sent before every MoveTo().
            </para>
            <para>
             Notes: If there is an attempt to set a speed which is lower than the minimum allowed axis speed, the function
             should set the speed to the minimum allowed and return eMotionResult.MRES_BADPARAM. 
             If there is an attempt to set a speed which is higher than the maximum allowed axis speed, the function
             should set the speed to the maximum allowed and return eMotionResult.MRES_BADPARAM. 
            </para>
            </summary>
            <param name="aAxis"> specifies the axis.  Axis1 is normally the X axis; Axis2 is normally the Y axis</param>
            <param name="aOpt"> specifies function (set speed, or reset to default) </param>
            <param name="aSpeed_mm_s"> desired speed, mm/s </param>
            <returns>
            MRES_OK       on success.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            <para>
             Purpose: This API should be used to set state of various hardware devices, like
             valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.  if 0 it means "all devices." API will make the best effort to apply given state to all devices in a group. E.g "toggle off all LEDs"</param>
            <param name="aState"> device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.  </param>
            <returns>
            MRES_OK       if successful.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            <para>
             Purpose: This API should be used to get status of some devices, like valves, pumps, LEDs etc. See eDevice for details.
            </para>
            </summary>
            <param name="aDev"> specifies device group we addressing </param>
            <param name="aIndex"> device index, starting from 1. E.g LED 1, ink pump 2 etc.</param>
            <param name="apState"> out: device state. Usually 0 for "OFF", 1 for "ON", though some specific devices can use more, e.g 2 for setting LED blinking.   </param>
            <returns>
            MRES_OK       if a valid device state is set in <paramref name="apState"/>.
            MRES_NOTINIT  if the motion controller is not initialised.
            MRES_FAULT    on error.
            MRES_UNIMPL   if device is not supported.
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
             <summary>
             <para>
              Purpose:  A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
               depends on command, options etc.
               
             Similar to <see cref="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)"/>, and mostly deprecated.
            
             MMI_GenericControl is only used by MetScan for <see cref="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SetDevVoltage"/>, with aOption set to
             <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_InkPump"/> to set the PWM voltage for all ink pumps, or <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_VacPump"/>
             to set the PWM voltage for the vacuum pump.  In both these cases, aParam contains just a single value, which is the PWM
             percentage to use.
            
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of 32-bit DWORDs in the aParam array</param>
             <param name="aParam">Command specific data</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
             <summary>
             <para>
              Purpose: A generic "ControlIO" interface. Its behaviour is completely implementation-defined and
              depends on command, options etc.
            
              Similar to <see cref="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])"/>, this version takes a string as the parameter, and is the
              version used for most MetScan commands.
             </para>
             </summary>
             <param name="aCommand">One of the <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> values</param>
             <param name="aOption">Command type specific option.  See command definition in <see cref="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd"/> for details.</param>
             <param name="aParamSize">The number of characters in the aParam string.</param>
             <param name="aParam">Command parameters, normally a JSON string.</param>
             <returns>One of the eMotionResult.MRES_xxx codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_SetLoggingDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            Means to apply logging delegate to Unmanaged library.
            N.B. this may not exist in all versions, in which case an EntryPointNotFoundException will be handled - preventing a 
                 breaking change to the DLL header interface.
            </summary>
            <param name="logDelegate"></param>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Put the MMI into job queue mode
            </summary>
            <param name="aParams">For future use: parameters for setting up the job queue.  Should currently be ignored.</param>
            <param name="aAdditionalParams">For future use: additional custom JSON parameters for setting up the job queue.  Should currently be ignored.</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_ACTIVE if the job sequence queue is already active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            <para>Exit job queue mode, either immediately or after the current in-progress move (if any) has completed, according to
                  the value of the aOption parameter.</para>
            <para>- JobSeqStop_CompleteMove means complete the current movement before stopping the job queue.</para>
            <para>- JobSeqStop_CancelNormal means cancel the current movement gracefully before stopping the job queue.</para>
            <para>- JobSeqStop_CancelUrgent means cancel all movement as soon as possible (crash stop).</para>
            <para> All remaining commands in the queue should then be discarded.</para>
            <para>** N.B. It is valid to call JobSequenceStop even if job sequence mode is not currently active, in which case it should just return MRES_OK **</para>
            <para>** N.B. During normal print job operation, the queue is stopped by setting the JobMotionQueueCmd_StopAfterMove flag for the final
                          move, rather than using MMI_JobSequenceStop ** </para>
            </summary>
            <param name="aOption">Defines how the stop should be carried out</param>
            <returns>
            MRES_OK on success; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_JobSequencePause">
            <summary>
            Pause the MMI job queue after the current in-progress move (if any) has completed.
            <para>Once the pause is complete and the X and Y axes are both idle, the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.PauseCount"/> must be incremented.
                  The increment must only happen once the queue is fully paused and the MMI is able to accept standard Move commands.</para>
            <para>The MMI must maintain the queue position for a subsequent resume.</para>
            <para>Additional commands can be added to the queue via MMI_JobSequenceQueueMove while it is paused</para>
            <para>** N.B. A pause can also happen automatically at the end of a swath if the JobMotionQueueCmd_PauseAfterMove bit is set in
                          TMotionQueueMoveArgs.ControlFlags **</para>
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_JobSequenceResume">
            <summary>
            Resume the job queue movements from the point where the queue was paused.
            A pause is started by either (a) a call to MMI_JobSequencePause, or (b) the end of a swath which has the JobMotionQueueCmd_PauseAfterMove bit set 
            </summary>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active; 
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Queue the next swath movement for the job.
            <para>** N.B. Swath commands can be added while the job sequence queue is paused **</para>
            <para>It is important that the motion system does not begin the movement for a swath until the print data for that swath is fully
                   buffered in the Meteor Print Controller Card (PCC) hardware.</para>
            <para>Therefore MetScan will queue the movement required for a swath only after the print data has been fully loaded into the Meteor hardware.</para>  
            <para>The number of swath movement commands which can be queued in advance depends on the image size and amount of PCC memory available 
                  per head in the printer configuration.  Normally it is possible to fit several swaths in PCC memory.</para>
            <para>N.B. MetScan has modes such as "Trim Blank X Edges of Swath" which mean that the movement required for each swath in a print job can 
                  be dependent on the image content.</para>
            </summary>
            <param name="aParams">Details of the X/Y movement</param>
            <returns>
            MRES_OK on success; 
            MRES_JOB_SEQ_INACTIVE if the job sequence queue is not active;
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PrintEngine.MMI_GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Retrieve the current job sequence status.
            <para>** N.B. It is valid to call this method whether or not the MMI has been put into job sequence mode **</para>
            <para>** N.B. MMI_MoveStatus must continue to report the status of each axis while job sequence mode is active</para>
            <para>  i.e. The X and Y axes must report AxS_Busy when the axis is carrying out a queued movement, otherwise AxS_Idle **</para>
            </summary>
            <param name="aParams">Filled in with the current job sequence status</param>
            <returns>
            MRES_OK on success; 
            MRES_STRUCTSIZE_MISMATCH if the <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.StructureSizeBytes"/> field is incorrect;
            See <see cref="T:Ttp.Meteor.MotionIntegration.eMotionResult"/> for other return codes
            </returns>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.UnmanagedMotionDll">
            <summary>
            Definition of the names of the unmanaged dll names which are supported natively by the Meteor Motion Integration Framework
            To get the <see cref="T:Ttp.Meteor.MotionIntegration.SwathIPCServer"/> to automatically load one of these dlls, pass the zero-based index of the
            dll in the <see cref="F:Ttp.Meteor.MotionIntegration.UnmanagedMotionDll.Name"/> array to <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithUnmanaged(System.Int32,System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.UnmanagedMotionDll.Name">
            <summary>
            Array of unmanaged Dll names which can be loaded directly by the Motion Integration Framework
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC">
            <summary>
            PInvoke interface into the unmanaged Motion Integration library Meteor_MPC.dll
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.DLL_NAME">
            <summary>
            Name of the unmanaged DLL providing the Motion Controller methods
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.Initialise(System.String)">
            <summary>
            Unmanaged entry point for MMI_Initialise
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.ShutDown">
            <summary>
            Unmanaged entry point for MMI_ShutDown
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            Unmanaged entry point for MMI_MoveHome
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            Unmanaged entry point for MMI_MoveCancel
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            Unmanaged entry point for MMI_ControlSetState
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            Unmanaged entry point for MMI_MoveTo
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            Unmanaged entry point for MMI_MoveStatus
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            Unmanaged entry point for MMI_MoveSetSpeed
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            Unmanaged entry point for MMI_ControlStatus
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            Unmanaged entry point for MMI_GetInterfaceVersion
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Unmanaged entry point for MMI_GenericControl
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Unmanaged entry point for MMI_GenericControlStr
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.SetLogDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            Optional SetLogDelegate unmanaged entry point, which allows a plugin to provide log information to the MMI server
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceStart.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceStop.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.JobSequencePause">
            <summary>
            Optional unmanaged entry point for MMI_JobSequencePause.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.JobSequenceResume">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceResums.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceQueueMove.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_Meteor_MPC.GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Optional unmanaged entry point for MMI_GetJobSequenceStatus.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.PInvoke_MotionController">
            <summary>
            PInvoke interface into the unmanaged Motion Integration library MotionController.dll
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.DLL_NAME">
            <summary>
            Name of the unmanaged DLL providing the Motion Controller methods
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.Initialise(System.String)">
            <summary>
            Unmanaged entry point for MMI_Initialise
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.ShutDown">
            <summary>
            Unmanaged entry point for MMI_ShutDown
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            Unmanaged entry point for MMI_MoveHome
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            Unmanaged entry point for MMI_MoveCancel
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            Unmanaged entry point for MMI_ControlSetState
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            Unmanaged entry point for MMI_MoveTo
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            Unmanaged entry point for MMI_MoveStatus
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            Unmanaged entry point for MMI_MoveSetSpeed
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            Unmanaged entry point for MMI_ControlStatus
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            Unmanaged entry point for MMI_GetInterfaceVersion
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Unmanaged entry point for MMI_GenericControl
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Unmanaged entry point for MMI_GenericControlStr
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.SetLogDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            Optional SetLogDelegate unmanaged entry point, which allows a plugin to provide log information to the MMI server
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceStart.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceStop.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.JobSequencePause">
            <summary>
            Optional unmanaged entry point for MMI_JobSequencePause.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.JobSequenceResume">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceResums.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceQueueMove.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MotionController.GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Optional unmanaged entry point for MMI_GetJobSequenceStatus.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.PInvoke_MMITest">
            <summary>
            PInvoke interface into the unmanaged Motion Integration library MMITest.dll
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.DLL_NAME">
            <summary>
            Name of the unmanaged DLL providing the Motion Controller methods
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.Initialise(System.String)">
            <summary>
            Unmanaged entry point for MMI_Initialise
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.ShutDown">
            <summary>
            Unmanaged entry point for MMI_ShutDown
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            Unmanaged entry point for MMI_MoveHome
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            Unmanaged entry point for MMI_MoveCancel
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            Unmanaged entry point for MMI_ControlSetState
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            Unmanaged entry point for MMI_MoveTo
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            Unmanaged entry point for MMI_MoveStatus
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            Unmanaged entry point for MMI_MoveSetSpeed
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            Unmanaged entry point for MMI_ControlStatus
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            Unmanaged entry point for MMI_GetInterfaceVersion
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Unmanaged entry point for MMI_GenericControl
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Unmanaged entry point for MMI_GenericControlStr
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.SetLogDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            Optional SetLogDelegate unmanaged entry point, which allows a plugin to provide log information to the MMI server
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceStart.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceStop.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.JobSequencePause">
            <summary>
            Optional unmanaged entry point for MMI_JobSequencePause.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.JobSequenceResume">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceResums.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceQueueMove.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_MMITest.GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Optional unmanaged entry point for MMI_GetJobSequenceStatus.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine">
            <summary>
            PInvoke interface into the unmanaged Motion Integration library PrintEngine.dll
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.DLL_NAME">
            <summary>
            Name of the unmanaged DLL providing the Motion Controller methods
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.Initialise(System.String)">
            <summary>
            Unmanaged entry point for MMI_Initialise
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.ShutDown">
            <summary>
            Unmanaged entry point for MMI_ShutDown
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.MoveHome(Ttp.Meteor.MotionIntegration.eMotionAxis)">
            <summary>
            Unmanaged entry point for MMI_MoveHome
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.MoveCancel(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eCancelOption)">
            <summary>
            Unmanaged entry point for MMI_MoveCancel
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.ControlSetState(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32)">
            <summary>
            Unmanaged entry point for MMI_ControlSetState
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.MoveTo(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMoveOption,System.Double)">
            <summary>
            Unmanaged entry point for MMI_MoveTo
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.MoveStatus(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.TMoveStat@)">
            <summary>
            Unmanaged entry point for MMI_MoveStatus
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.MoveSetSpeed(Ttp.Meteor.MotionIntegration.eMotionAxis,Ttp.Meteor.MotionIntegration.eMSpeedOption,System.Double)">
            <summary>
            Unmanaged entry point for MMI_MoveSetSpeed
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)">
            <summary>
            Unmanaged entry point for MMI_ControlStatus
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.GetInterfaceVersion(System.UInt32@,System.UInt32@)">
            <summary>
            Unmanaged entry point for MMI_GetInterfaceVersion
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.GenericControl(System.Int32,System.Int32,System.Int32,System.UInt32[])">
            <summary>
            Unmanaged entry point for MMI_GenericControl
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.GenericControlStr(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Unmanaged entry point for MMI_GenericControlStr
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.SetLogDelegate(Ttp.Meteor.MotionIntegration.LogDelegate)">
            <summary>
            Optional SetLogDelegate unmanaged entry point, which allows a plugin to provide log information to the MMI server
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.JobSequenceStart(Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs,System.String)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceStart.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.JobSequenceStop(Ttp.Meteor.MotionIntegration.eJobSequenceStopOption)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceStop.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.JobSequencePause">
            <summary>
            Optional unmanaged entry point for MMI_JobSequencePause.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.JobSequenceResume">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceResums.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.JobSequenceQueueMove(Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs)">
            <summary>
            Optional unmanaged entry point for MMI_JobSequenceQueueMove.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.PInvoke_PrintEngine.GetJobSequenceStatus(Ttp.Meteor.MotionIntegration.TMotionQueueStatus@)">
            <summary>
            Optional unmanaged entry point for MMI_GetJobSequenceStatus.  Should only be called if the MMI_Feature_JobMotionQueue flag is set.
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eMotionResult">
            <summary>
            <para>Definition of function return codes used by the Meteor Motion Integration Framework</para>
            <para>MRES_xxx codes should be used by the Motion Integration Plugins</para>
            <para>MIPC_xxx codes are reserved for the MMI Framework comms</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_OK">
            <summary>Success</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_BUSY">
            <summary>Busy</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_FAULT">
            <summary>General fault</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_INTERRUPT">
            <summary>Interrupted</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_NOTINIT">
            <summary>Motion not initialised</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_UNIMPL">
            <summary>Unimplemented function</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_BADPARAM">
            <summary>Parameter is invalid - e.g. an out of range speed.  The value which is set will be snapped into the valid range.</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_STRUCTSIZE_MISMATCH">
            <summary>Mismatch in the structure size</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_NOFIRMWARE">
            <summary>Can't open the motion controller firmware file</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_JOB_SEQ_ACTIVE">
            <summary>The method can't be called while the MMI is in job sequence mode (e.g. the 'MoveTo' API, or to trap duplicate calls to JobSequenceStart)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_JOB_SEQ_INACTIVE">
            <summary>The method can't be used *unless* the MMI is in job sequence mode (i.e. after JobSequenceStart has been called)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_JOB_SEQ_QUEUE_FULL">
            <summary>MMI_JobSequenceQueueMove cannot queue the move on the PLC because the PLC's move queue is full.  MetScan will retry sending the command every 250ms until it succeeds.</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_JOB_SEQ_QUEUE_NOT_PAUSED">
            <summary>Cannot pause the job sequence queue because it is already paused.</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MRES_JOB_SEQ_QUEUE_ALREADY_PAUSED">
            <summary>Cannot resume the job sequence queue because it is not paused</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MIPC_MethodNotFound">
            <summary>Missing method: used by the IPC server/client only</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MIPC_ParamCountMismatch">
            <summary>Parameter count mismatch: used by the IPC server/client only</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MIPC_ParamTypeInvalid">
            <summary>Invalid parameter type: used by the IPC server/client only</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MIPC_MethodCallFailed">
            <summary>Failed to invoke method: used by the IPC server/client only</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MIPC_IPCSendFailed">
            <summary>Sending data over the IPC link failed: used by the IPC server/client only</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MIPC_IPCReceiveFailed">
            <summary>Receiving data over the IPC link failed: used by the IPC server/client only</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MIPC_IPCLinkDown">
            <summary>The Swath IPC named pipes aren't connected</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionResult.MIPC_InInitEvent">
            <summary>An attempt has been made to send a command from within the client InitialisationComplete event</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eMotionAxis">
            <summary> axis definition </summary>>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionAxis.AxisNone">
            <summary>No axis specified.  Used in MoveCancel to cancel generic non-axis movement (if any)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionAxis.Axis1">
            <summary>Axis 1.  This is normally the printer's X axis (scanning carriage movement)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionAxis.Axis2">
            <summary>Axis 2.  This is normally the printer's Y axis (substrate movement)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionAxis.Axis3">
            <summary>Axis 3</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotionAxis.Axis4">
            <summary>Axis 4</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eAxisSate">
            <summary> 
            axis states
            <para>(typo in enumeration name retained for backwards compatibility)</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eAxisSate.AxS_Invalid">
            <summary>invalid state, motion system is not initialised</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eAxisSate.AxS_Idle">
            <summary>idle, can accept MoveXXX commands</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eAxisSate.AxS_Busy">
            <summary>busy, motor is moving</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eAxisSate.AxS_Estop">
            <summary> estop is activate </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eCancelOption">
            <summary> Motor movement cancelling options </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eCancelOption.CANCEL_NORMAL">
            <summary>normal cancel, uses graceful motors stopping</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eCancelOption.CANCEL_URGENT">
            <summary>urgent cancel, crash stop, do it as quick as possible</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eMoveOption">
            <summary> Motor movement options </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMoveOption.MV_DistAbs">
            <summary>moving distance is considered as absolute</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMoveOption.MV_DistRel">
            <summary>moving distance is considered as relative to the current position</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMoveOption.MV_DistAbsMediaSense">
            <summary>
            special move type for sensing media position, e.g. using a sensor mounted on a print carriage
            the carriage should stop the search at or before the absolute position sent as part of the 
            MoveTo command
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMoveOption.MV_DistAbsForwardPrintScan">
            <summary>Moving absolute distance for forward printing scan</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMoveOption.MV_DistAbsReversePrintScan">
            <summary>Moving absolute distance for reverse printing scan</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eMSpeedOption">
            <summary> MoveSetSpeed() API options </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMSpeedOption.MVS_ResetToDefault">
            <summary>reset all speed settings to the default</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMSpeedOption.MVS_SetMoveSpeed">
            <summary>set motor move speed</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eDevice">
            <summary> MPC devices, see ToggleControl() </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_Board">
            <summary>The board itself</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_Motor">
            <summary>motor device</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_InkPump">
            <summary>ink pump e.g. for refilling header tanks</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_VacPump">
            <summary>vacuum pump, for maintaining meniscus</summary> 
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_PurgePump">
            <summary>purge pump</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_Valve">
            <summary>valve, e.g. to switch in the purge pump</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_AuxPump">
            <summary> Auxiliary pump </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_Sensors">
            <summary> A set of generic sensors that can be mapped as Home/Neg.Limit/Pos. motor limit switches or used for other purposes </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_LED">
            <summary>LED (not supported currently)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_GpInput">
            <summary>General purpose input (not supported currently)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_GpOutput">
            <summary>General purpose output (not supported currently)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_Keypad">
            <summary>Keypad pseudo-device. Uses generic MPC sensors as keys, see TKeypadState</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_Alarm">
            <summary>"Alarm" pseudo-device. represents 1 status bit. value '1' indicates that MPC board alarm triggered and it has shut down all peripherals</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_MediaSense">
            <summary>
            <para>Media sensor pseudo-device.  There are two device indexes; 1 for the start of the media and 2 for the end of the media.</para>
            <para>- MMI_ControlStatus(DEV_MediaSense, 1, out apState) should return the distance in mm from the home position to the start of the media in apState</para>
            <para>- MMI_ControlStatus(DEV_MediaSense, 2, out apState) should return the distance in mm from the home position to the end of the media in apState</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_InkTankSensors">
            <summary>Ink tanks sensors state</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_PressureSensor">
            <summary>Pressure sensor</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_PresenceDetector">
            <summary>
            <para>Presence detector device such as a light curtain.</para>
            <para>The 'MMI_Feature_PresenceDetector' features supported bit should be set in 'MMI_GetInterfaceVersion' if a presence detector is available.</para>
            <para>When available, MetScan polls the status of the presence detector via 'MMI_ControlStatus' when motion is in progress (at the configured MMI polling interval).</para>
            <para>The sensor status should be returned in the 'apState' parameter: a value greater than zero means that the sensor has triggered.</para>
            <para>If the MetScan 'Halt On Presence Detector Signal' setting is on, all current MetScan motion will be halted if the triggered status is detected.</para>
            <para>*** Note that the MetScan poll is for status / error reporting only. ***
                      All safety critical functions that are triggered by the presence detector MUST be implemented in hardware. ***</para>
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eMotorSensor">
            <summary> 
            Definition of logical motor sensors bit flags. 
            Enum values correspond to a bit number in sensors status word. Bit set to '1' corresponds to an active sensor
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotorSensor.MtrSens_Home">
            <summary>Bit 0, state of the motor "home" sensor</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotorSensor.MtrSens_MinPosLimit">
            <summary>Bit 1, state of the motor limit switch at min. position</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eMotorSensor.MtrSens_MaxPosLimit">
            <summary>Bit 2, state of the motor limit switch at max. position </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.TGenCtlCmd">
            <summary>GenericControl commands</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_None">
            <summary>Placeholder value which can be used to indicate "no command"</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SetDevVoltage">
            <summary>set some device voltage (just PWM value [0..100]). aOption: low word = device (see eDevice), apParam = PWM value</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunCmdScript">
            <summary>Run MPC command script. aOption:0 -> (const char*)apParam points to the script itself;  aOption:1 -> (const char*)apParam points to the script file name;</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunCleaningProcedure">
            <summary> Run cleaning procedure. aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SetUvLampSettings">
            <summary> Set up UV lamp configurations. aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SetUvLampSwathCommand">
            <summary> Set up UV lamp start and end positions. aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunStartSequence">
            <summary> Custom action to be completed before every job (if enabled). aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunEndSequence">
            <summary> Custom sequence to be completed at the end of every job (if enabled). aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_UpdateHeadTemperatureInfo">
            <summary> Fixed list of heads target and actual temperatures (if enabled). aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SendPrintProgress">
            <summary> Last printed and total number of swath (if enabled). aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunGroupEndSequence">
            <summary> Custom sequence to be completed at the end of last job in a group (if enabled). aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunQueueEndSequence">
            <summary> Custom sequence to be completed at the end of last job in the queue (if enabled). aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunQueueStartSequence">
            <summary> Custom sequence to be completed at the start of the first job in the queue (if enabled). aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_SendJobGroupSize">
            <summary> Send information about job group size at the start of first job (if enabled). aOption:0 -> (const char *) String with listed parameters and corresponding values</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunInitialiseSequence">
            <summary>Optional sequence run when the MPCZ first connects</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtl_RunPurgeSequence">
            <summary>Run the (MPCZ) purge sequence</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtlTest_SetLogging">
            <summary>set DLL logging options . aOption contains bitmask (combination of KLog_* constants). Useful for forcing logging on and off</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtlTest_UpdateMpcFw">
            <summary> update MPC FW. aOption: board number [0..N], apParam points to the FW file name</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtlTest_GetMotor">
            <summary>get a pointer to the TMotor instance. aOption: specifies axis, see eMotionAxis. apParam: const  TMotor**, out: const  TMotor*</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TGenCtlCmd.ECtlTest_SendRawCmd">
            <summary>send raw MPC command and get response. apParam: TTestRawMpcCmd* If aOption==0 then TTestRawMpcCmd::cmd sent via command interface, if aOption==1, TTestRawMpcCmd::cmd sent directly to UART</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eGenericPumpBits">
            <summary>
            Bit fields reported by the 'apState' returned by <see cref="M:Ttp.Meteor.MotionIntegration.IMotion.MMI_ControlStatus(Ttp.Meteor.MotionIntegration.eDevice,System.UInt32,System.Int32@)"/> for the <see cref="F:Ttp.Meteor.MotionIntegration.eDevice.DEV_InkPump"/> device,
            used when the MMI is running in "generic pumps" mode.  The pump index sent to MMI_ControlStatus in the 'aIndex' parameter is from 1 to N.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eGenericPumpBits.GenericPumps_PumpControlEnabled">
            <summary>Bit is set if pump control is currently enabled (i.e. the pump automatically turns on when the ink sensor reports not-full)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eGenericPumpBits.GenericPumps_PumpActive">
            <summary>Bit is set if the pump is currently active.</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eGenericPumpBits.GenericPumps_TankFullSensor">
            <summary>Bit is set if the sensor is reporting tank full.</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eGenericPumpBits.GenericPumps_PumpTimeout">
            <summary>Bit is set if the pump timed out due to running for too long without a tank full being seen.</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eGenericPumpBits.GenericPumps_EntityConfigured">
            <summary>The pump+ink entity is connected and configured (for the MPC-Z, the configuration parameters are in the [MPC_Ink_InterfaceN] section in the configuration file).</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eGenericPumpCmd">
            <summary>
            
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eGenericPumpCmd.GenericPumpCmd_Disable">
            <summary>
            Disable the ink pump
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eGenericPumpCmd.GenericPumpCmd_Enable">
            <summary>
            Enable the ink pump, it automatically switches on when the sensor reports not-full
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eGenericPumpCmd.GenericPumpCmd_ClearTimeoutAndDisable">
            <summary>
            Clear an ink pump timeout error, but leave the pumps in a disabled state.  
            A further GenericPumpCmd_Enable command is required to re-enable pump control.
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.TMoveStat">
            <summary> Structure for retrieving move status. See MoveStatus() API. </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMoveStat.structSize">
            <summary> IN: must contain this structure size </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMoveStat.axisState">
            <summary> OUT: axis state, see eAxisSate enum </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMoveStat.dist_mm">
            <summary> OUT: current absolute distance if applicable, mm </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMoveStat.axisHomed">
            <summary> OUT: true (1) when axis was homed and motor absolute position is known; false (0) otherwise </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMoveStat.activeSensorsBmp">
            <summary> OUT: Bitmap with a combination of bits describing activated motor sensors. Bit set to '1' indicates an active sensor. For bits definition see <see cref="T:Ttp.Meteor.MotionIntegration.eMotorSensor"/>. </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMoveStat.assignedSensorsBmp">
            <summary> OUT: Bitmap describing the sensors assigned to the motor. Bit set to '1' at some position indicates that the motor uses corresponding sensor. For bits definition see <see cref="T:Ttp.Meteor.MotionIntegration.eMotorSensor"/>. </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.TMoveStat.ToString">
            <summary>String representation of the object</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.TKeypadState">
            <summary> Structure that describes keypad state. See documentation on how to set up and use keypad</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TKeypadState.KeysStateCurr">
            <summary> Current keypad state bitmap</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TKeypadState.KeysStateLatched">
            <summary> Latched keypad state bitmap</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs">
            <summary>
            For future use.
            [ Mandatory parameter which are sent to MMI_JobSequenceStart to set up the sequence for a print job.
              Additional application specific pass-through parameters can be sent as a separate JSON string if required. ]
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs.StructureSizeBytes">
            <summary>
            Must contain the size of this structure in bytes
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStartArgs.Reserved">
            <summary>
            Fields will be added here in the future as required
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.eJobSequenceStopOption">
            <summary>Options for stopping the job sequence queue (MMI_JobSequenceStop)</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eJobSequenceStopOption.JobSeqStop_CompleteMove">
            <summary>stop the job sequence queue after the current move has completed</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eJobSequenceStopOption.JobSeqStop_CancelNormal">
            <summary>stop the move immediately with a normal cancel, uses graceful motors stopping</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.eJobSequenceStopOption.JobSeqStop_CancelUrgent">
            <summary>stop the move with an urgent cancel, crash stop, do it as quick as possible</summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs">
            <summary>
            <para>Parameters sent to MMI_JobSequenceQueueMove, defining the X and Y movement for a swath.</para>
            <para>The carriage will have been placed in the correct position for starting the swath by the previous queued moved,
                  or by a non-queued MMI_MoveTo command prior to the start of job sequence mode.</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_XAxisMove">
            <summary>
            Bit set in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/> if this move includes the X axis.  All X axis parameters should be ignored if this bit is clear.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_IsPrintingMove">
            <summary>
            Bit set in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/> for a printing X move (otherwise the X movement does not print - e.g. the return pass for a 
            uni-directional print job)
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_YAxisMove">
            <summary>
            Bit set in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/> if this move includes the Y axis.  All Y axis parameters should be ignored if this bit is clear.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_IsYAbsolute">
            <summary>
            Bit set in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/> for an absolute Y movement (otherwise it's a relative Y movement)
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_PauseAfterMove">
            <summary>
            <para>Bit set in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/> to say that the MMI should enter job sequence pause immediately after this move has completed</para>
            <para>This bit is set if the application needs to temporarily take over control of the X and Y axes during a queued job, e.g. for
                  spitting or a cleaning sequence</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_StopAfterMove">
            <summary>
            <para>Bit set in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/> to say that the MMI should stop job sequence mode immediately after this move has completed</para>
            <para>This bit can be set for the last movement in a queued print job</para>
            <para>Note that it is also possible in some situations for this to be the only ControlFlag bit that is set, meaning that this is a
                  "no operation" move terminating the job (e.g. if there is an auto-clean sequence after the final swath in a job)</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_HasPreviousXPos">
            <summary>
            <para>Indicates that the details of the **previous** X move are valid (<see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.PreviousXPositionMm"/> and <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.PreviousXSpeedMm_s"/>).</para>
            <para>This will normally be the case for every move in a print job aside from the first one.</para>
            <para>These details can be used to make sure that the printer carriage is in the correct position prior to resuming job queue moves
                  after a ResumeJobSequence call.  This is because manual moves during the pause period may have moved the carriage to a different position.</para>  
            <para>Alternatively, the MMI queue implementation can simply remember its previous move details internally, so it is free to ignore these details.</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_HasPreviousAbsYPos">
            <summary>
            <para>As with <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobMotionQueueCmd_HasPreviousXPos"/> but for absolute Y axis moves.</para>
            <para>Y relative moves are not tracked because it is assumed that a relative Y axis won't move during maintenance.</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobNotionQueueCmd_SkipPreviousWaitForY">
            <summary>
            Bit set in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/> if the X movement can start *before* the Y movement for the previous swath has completed.
            This relies on appropriate speeds and acceleration distances.
            At some points in the job sequence - such as if there is a "skipped" blank swath - this may not be possible, due to a larger than
            normal Y step.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.JobNotionQueueCmd_MoveYAfterPrintComplete">
            <summary>
            Bit set in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/> if the Y axis move can start as soon as the carriage has passed XPrintEndMm.
            Otherwise, the Y axis move should not start until the X axis move has completed.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.StructureSizeBytes">
            <summary>
            Must contain the size of this structure in bytes
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags">
            <summary>
            See JobMotionQueueCmd_XXX
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.XPrintStartMm">
            <summary>
            Absolute X position of the carriage where printing (with the leading head) starts.
            (Zero if JobMotionQueueCmd_IsPrintingMove is not set)
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.XPrintEndMm">
            <summary>
            Absolute X position of the carriage where printing (with the trailing head) stops
            (Zero if JobMotionQueueCmd_IsPrintingMove is not set)
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.XEndMm">
            <summary>
            Absolute X position of the carriage at the end of the swath
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.XSpeedMm_s">
            <summary>
            If non-zero, override the current X axis speed for this move.
            If zero, the X axis speed set previously set by MMI_MoveSetSpeed (for <see cref="F:Ttp.Meteor.MotionIntegration.eMotionAxis.Axis1"/>) should be used.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.PostSwathYDistMm">
            <summary>
            Y axis movement required after the swath has completed printing.
            Either absolute or relative, defined by the JobMotionQueueCmd_IsYAbsolute bit in <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ControlFlags"/>.
            The Y movement can take place before the X movement has completed provided the X position is between XPrintEndDistMm and XEndDistMm.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.YSpeedMm_s">
            <summary>
            If non-zero, override the current Y axis speed for this move.
            If zero, the Y axis speed set previously set by MMI_MoveSetSpeed (for <see cref="F:Ttp.Meteor.MotionIntegration.eMotionAxis.Axis2"/>) should be used.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ZHeightMm">
            <summary>
            <para>Z axis height which the printer should be at for this X/Y move.</para>
            <para>N.B. Included for tracking purposes only; Z axis moves are ** not ** currently queued as part of the job sequence queue.</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.PreviousXPositionMm">
            <summary>
            If the JobMotionQueueCmd_HasPreviousXPos flag is set, this is the position the X axis should have arrived at
            prior to starting this move.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.PreviousXSpeedMm_s">
            <summary>
            <para>If the JobMotionQueueCmd_HasPreviousXPos flag is set, this is the speed of the previous X move.</para>
            <para>Included primarily for debug checks.</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.PreviousYAbsPositionMm">
            <summary>
            <para>If the JobNotionQueueCmd_SkipPreviousWaitForY flag is set, this is the target Y position of the 
                  previous move.</para>
            <para>** N.B. If the JobNotionQueueCmd_SkipPreviousWaitForY flag is also set, this Y position may not yet be reached
                          when the X move starts.</para>
            <para>This is OK providing the motion speeds are set appropriately, with the Y axis guaranteed to reach PreviousYAbsPositionMm
                  before the X axis reaches XPrintStartMm.</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.PreviousYSpeedMm_s">
            <summary>
            <para>If the JobMotionQueueCmd_HasPreviousAbsYPos flag is set, this is the speed of the previous Y move.</para>
            <para>Included primarily for debug checks.</para>
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.TMotionQueueMoveArgs.ToString">
            <summary>
            Formatted string containing the object state for logging
            </summary>
            <returns>A string like 'ControlFlags=0x0007 X->100.0mm->400.0mm->500.0mm [0.0mm/s] Y->50.0mm [0mm/s]'</returns>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.TMotionQueueStatus">
            <summary>
            Structure for retrieving job queue sequence status.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.JobMotionQueueStatus_QueueIsStarted">
            <summary>
            <para>The MMI plugin must set this bit in the StatusFlags when the job sequence queue is started.  i.e.:</para>
            <para>- after [the JobSequenceStart call], when the job sequence queue is ready to accept TMotionQueueMoveArgs commands</para>
            <para>Once the bit is set, it must remain set until the queue stops (i.e. when the JobMotionQueueStatus_QueueIsStopped bit becomes set)</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.JobMotionQueueStatus_QueueIsStopped">
            <summary>
            <para>The MMI plugin must set this bit in the StatusFlags when an active job sequence queue stops.  i.e.:</para>
            <para>- after [the JobSequenceStop call] OR [a move with the JobMotionQueueCmd_StopAfterMove flag completes], after which the MMI plugin 
                    is ready to accept single MoveTo commands.</para>
            <para>The flag must not be set until all associated job sequence motion has completed.</para>
            <para>Once MetScan has see this flag set, it will stop polling GetJobSequenceStatus.</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.StructureSizeBytes">
            <summary>
            IN: Must contain the size of this structure in bytes
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.StatusFlags">
            <summary>
            OUT: Status flags
            - JobMotionQueueStatus_QueueIsStarted: Set if the MMI motion queue has fully started
            - JobMotionQueueStatus_QueueIsStopped: Set if the MMI motion queue mode has fully stopped and the MMI can accept standard commands
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.TotalMovesQueued">
            <summary>
            <para>OUT: The MMI plugin must report the total number of movements that have been queued via MMI_JobSequenceQueueMove since 
                      the queue was last enabled via MMI_JobSequenceStart.  Should be zero if job sequence mode is not currently enabled.</para> 
            <para>**  N.B. This count includes all queued moves, not just the moves which result in printing  **</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.TotalMovesCompleted">
            <summary>
            <para>OUT: The MMI plugin must report the total number of queued movements that have fully completed since the queue was
                       last enabled via MMI_JobSequenceStart.  Should be zero if job sequence mode is not currently enabled.</para>
            <para>**  N.B. All move commands sent to MMI_JobSequenceQueueMove must be included, not just the moves which result in printing **</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.PrintingMovesCompleted">
            <summary>
            <para>OUT: The MMI plugin must also report the total number of **printing** movements that have fully completed since the queue was
                       last enabled via MMI_JobSequenceStart.  Should be zero if job sequence mode is not currently enabled.</para>
            <para>These are the moves which are queued with the JobMotionQueueCmd_IsPrintingMove flag set</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.XAxisPosition">
            <summary> OUT: current X axis position in mm</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.YAxisPosition">
            <summary> OUT: current Y axis position in mm</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.QueueEnabledTimeMs">
            <summary>
            Placeholder for possible future use.  Currently unused.  [ The amount of time which has passed since JobSequenceStart ]
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.QueuePausedTimeMs">
            <summary>
            Placeholder for possible future use.  Currently unused.  [ The amount of time the queue has spent in pause since JobSequenceStart ] 
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.QueuePrintingMoveTimeMs">
            <summary>
            Placeholder for possible future use.  Currently unused.  [ The amount of time the queue has spent running printing moves since JobSequenceStart ]
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.PauseCount">
            <summary>
            <para>The number of times that the job sequence queue has transitioned into the paused state since the JobSequenceStart call.</para>
            <para>A transition to pause can be either (a) after a JobSequencePause call, or (b) after a move with the JobMotionQueueCmd_PauseAfterMove flag completes.</para>
            <para>When <c>PauseCount == (1 + ResumeCount)</c>, the job sequence queue is paused, and the MMI plugin is ready to accept single MoveTo commands.</para>
            <para>PauseCount should be reset to zero in the JobSequenceStart call.  Aside from this reset case, it should never decrease.</para>
            <para>See also <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.ResumeCount"/></para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.ResumeCount">
            <summary>
            <para>The number of times that the job sequence queue has transitioned out of the paused state since the JobSequenceStart call.</para>
            <para>A transition out of pause happens after MetScan calls JobSequenceResume.</para>
            <para>When <c>ResumeCount == PauseCount</c> the job sequence queue is "not paused".</para>
            <para>ResumeCount should be reset to zero in the JobSequenceStart call.  Aside from this reset case, it should never decrease.</para>
            <para>See also <see cref="F:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.PauseCount"/></para>
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.TMotionQueueStatus.ToString">
            <summary>
            Formatted string containing the object state for logging
            </summary>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR">
            <summary>
            Definitions of the MMI (Meteor Motion Integration) server error codes
            Can be returned from <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithObject(Ttp.Meteor.MotionIntegration.IMotion)"/>; <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithUnmanaged(System.Int32,System.Boolean,System.Boolean)"/>; 
            <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithAssemblySearch(System.Boolean,System.Boolean,System.String)"/>; and <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.Stop"/>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.OK">
            <summary>Server initialised OK</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.IMOTION_NOT_FOUND">
            <summary>Could not find an assembly containing an object which implements IMotion</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.ALREADY_STARTED">
            <summary>This instance of the server has already been started</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.ALREADY_RUNNING">
            <summary>The Meteor Motion Integration Server is already running in a process on this PC</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.NOT_RUNNING">
            <summary>The MMI server is not running</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.IPC_PIPE_CREATE_FAILED">
            <summary>Failed to create the IPC named pipes</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.INVALID_UNMANAGED_INDEX">
            <summary>The index passed to RunWithUnamanaged was outside the valid range</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.NULL_IMOTION">
            <summary>The value of IMotion passed to RunWithObject was null</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.PATH_NOT_FOUND">
            <summary>The path to the server executable is invalid</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.PROCESS_START_FAILED">
            <summary>Failed to start the child server process</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.PROCESS_STOP_FAILED">
            <summary>Failed to stop the server process</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.UNMANAGED_PLUGIN_DLL_NOT_FOUND">
            <summary>The unmanaged MMI plugin DLL (e.g. Meteor_MPC.dll or MotionController.dll) could not be found</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.MOTIONINTEGRATIONCLS_NOT_FOUND">
            <summary>If the server app SwathIPCServer.exe is being used, MotionIntegrationCLS.dll must also be present in the same folder</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.ALREADY_STOPPING">
            <summary>Overlapped calls to <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.Stop"/> are not allowed</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.BAD_PARAMS">
            <summary>Invalid command line parameters</summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCLogHelper.FormatCmd(System.Runtime.Remoting.Messaging.IMethodCallMessage)">
            <summary>
            Format a method call command for logging
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCLogHelper.FormatResponse(System.Runtime.Remoting.Messaging.IMethodReturnMessage)">
            <summary>
            Format a method response for logging
            </summary>
            <param name="resp"></param>
            <returns></returns>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.SwathIPCPipeRead">
            <summary>
            Helper object for reading from the Swath IPC pipe
            </summary>
        </member>
        <member name="P:Ttp.Meteor.MotionIntegration.SwathIPCPipeRead.Command">
            <summary>
            The command can only be <see cref="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.CMD_MOTION"/> or <see cref="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.CMD_MOTION_QUEUE"/>
            </summary>
        </member>
        <member name="P:Ttp.Meteor.MotionIntegration.SwathIPCPipeRead.CallContext">
            <summary>
            Unique ID for this method call/return
            </summary>
        </member>
        <member name="P:Ttp.Meteor.MotionIntegration.SwathIPCPipeRead.Message">
            <summary>
            Received method call or method return message
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCPipeRead.ReadPipe(System.IO.Pipes.PipeStream)">
            <summary>
            Read the message from the pipe.  Returns true if a messages has been read; false if the pipe has closed.
            </summary>
            <param name="pipe">Inter-process pipe</param>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.SwathIPCPipeWrite">
            <summary>
            Helper object for writing to the Swath IPC pipe
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCPipeWrite.WritePipe(System.IO.Pipes.PipeStream,System.Runtime.Remoting.Messaging.IMessage,System.UInt32,System.UInt32)">
            <summary>
            Write the message to the pipe, preceded by a small header with the call context
            </summary>
            <param name="pipe">Inter-process pipe</param>
            <param name="msg">Method call or return message</param>
            <param name="callContext">Unique ID for this call/return</param>
            <param name="command"><see cref="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.CMD_MOTION"/> or <see cref="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.CMD_MOTION_QUEUE"/></param>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCPipeWrite.WritePipe(System.IO.Pipes.PipeStream,System.UInt32,System.UInt32)">
            <summary>
            Write a server command to the pipe.  There are a few message which are handled
            directly by the server, for handshaking the open and close sequence, and 
            version checking
            </summary>
            <param name="Pipe">Inter-process pipe</param>
            <param name="cmd">Server command</param>
            <param name="callContext">Unique ID for this call</param>
        </member>
        <member name="T:Ttp.Meteor.MotionIntegration.SwathIPCServer">
            <summary>
            <para>Inter-Process Comms Server for Meteor Motion Integration; the server runs the Motion Integration dll or alternative implementation of <see cref="T:Ttp.Meteor.MotionIntegration.IMotion"/>.</para>  
            <para>The server can be run as a stand-alone command line application, SwathIPCServer.exe, or embedded within a third party service or application.</para>
            <para>SwathIPCServer.exe can be launched on-demand by the client; it searches the assemblies within its folder to find an implementation of <see cref="T:Ttp.Meteor.MotionIntegration.IMotion"/>.</para>
            <para>A third party implementation will typically create the object which implements IMotion directly and start the server with RunWithObject.</para>
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.CMDPIPE">
            <summary>Name of the pipe used by the inter process comms for sending commands to the motion integration server</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.RSPPIPE">
            <summary>Name of the pipe used by the inter process comms for receiving responses from the motion integration server</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.MMI_SERVER_RUNNING_MUTEX">
            <summary>Name of the mutex which is created when the motion integration server is running</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.OutputPipe">
            <summary>Name of the pipe used to provide log output to Metscan2</summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.CMD_MOTION">
            <summary>
            Value set in the command field for all standard message sent on the pipe.
            For client to server commands, this means that the message is for the IMotion interface.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.CMD_MOTION_QUEUE">
            <summary>
            Value set in the command field to target commands at the optional IJobMotionQueue interface.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._commandPipe">
            <summary>
            Pipe for receiving commands from the client.  Must use Byte transmission mode because messages use the BinaryFormatter.
            The pipe is read from a single thread, although commands are executed in a dedicated worker per command
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._responsePipe">
            <summary>
            Pipe for sending command responses back to the client.  Must use Byte transmission mode because messages use the BinaryFormatter
            Accessed from multiple threads, because each command executes in a dedicated thread.
            Object must therefore be locked while writing a message
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._outputServicePipe">
            <summary>
            Pipe for sending log message back to the client
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._outputServiceTask">
            <summary>
            Thread running the output service
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._serverThread">
            <summary>
            Thread which reads the _CommandPipe and dispatches messages to asynchronous tasks
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._exit">
            <summary>
            Flag set to exit the _serverThread and _outputServiceTask
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._lastCallContext">
            <summary>
            Each call into the server has a unique 32 bit ID - the call context - so that the
            response can be matched with the command at the client end.  The mechanism is
            needed because the server supports asynchronous overlapped calls, so the order
            of responses is not necessarily the order the commands were sent it.
            
            Currently the server just increments the ID in each call, so we keep track of
            the IDs in the server for debug checks - they should increase by 1 for each call.
            
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._motion">
            <summary>
            Object which implements the IMotion interface.  This can either be passed to the server directly,
            or the server can attempt to load it from assemblies in the directory that its being run from.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._runningMutex">
            <summary>
            Mutex which is created when the MMI server is running.  Only one instance of the server can run on a PC.
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._stopping">
            <summary>
            Protect against overlapped calls to Stop
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._logClientCommands">
            <summary>
            Are MMI commands and responses logged to the output pipe
            </summary>
        </member>
        <member name="F:Ttp.Meteor.MotionIntegration.SwathIPCServer._outputLogMessageQueue">
            <summary>
            Queue of output log messages.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.OutputLine(System.String)">
            <summary>
            <para>Queue a log message for consumption by the MMI client, also writing it to the console and (in a debug build) the debug trace</para>
            <para>** N.B. It is valid to call this method even if calling Run failed, the log pipe is independent of the full MMI plugin connection **</para>
            </summary>
            <param name="logLine"></param>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.BuildOutputString">
            <summary>
            Dequeue the next log message for sending to the MMI client via the output service pipe (<see cref="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.OutputPipe"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.StartOutputLoggingService">
            <summary>
            Create a pipe, which is independent of the business logic command / response pipes, for sending log messages
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.LoadMotionDll(System.String)">
            <summary>
            <para>Search all .NET assemblies in the folder we're running from, or for an explicit dll if <paramref name="fileName"/> is set</para>
            <para>If one is found which has a public class which implements IMotion, an instance of the object is created</para>
            </summary>
        </member>
        <member name="E:Ttp.Meteor.MotionIntegration.SwathIPCServer.ClientConnected">
            <summary>
            Event raised when a client is connected to the server.
            If required, the event handler should be added before calling one of the Run methods.
            </summary>
        </member>
        <member name="E:Ttp.Meteor.MotionIntegration.SwathIPCServer.ClientDisconnected">
            <summary>
            Event raised when a client has disconnected from the server.
            If required, the event handler should be added before calling one of the Run methods.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithObject(Ttp.Meteor.MotionIntegration.IMotion)">
            <summary>
            Start the Swath IPC server, which receives motion controller commands from Meteor applications.
            The server should be started using RunWithObject if it is embedded within the same assembly which 
            controls the motion system; the object which implements IMotion should be created and passed to 
            this method.
            </summary>
            <param name="motionController">Object which forwards commands to the motion control subsystem</param>
            <returns><see cref="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.OK"/>on success, or one of the <see cref="T:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR"/> error codes</returns>
        </member>
        <member name="P:Ttp.Meteor.MotionIntegration.SwathIPCServer.LogDelegate">
            <summary>
            <para>Delegate for logging callbacks.</para>
            <para>*** Must be set prior to calling <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithAssemblySearch(System.Boolean,System.Boolean,System.String)"/> or <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithUnmanaged(System.Int32,System.Boolean,System.Boolean)"/>.</para>
            <para>Normally this should be set up to route messages into <see cref="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.OutputLine(System.String)"/>, where they are queued into the
                  <see cref="F:Ttp.Meteor.MotionIntegration.SwathIPCServer.OutputPipe"/> pipe which can be consumed by the client application.</para>
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithUnmanaged(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            <para>Start the Swath IPC server, which receives motion controller commands from Meteor applications.</para>
            <para>The server should be started using RunWithUnmanaged if an unmanaged DLL is providing the integration
                  to the motion control sub-system.</para>
            <para>The index should be the index of the DLL name in the <see cref="F:Ttp.Meteor.MotionIntegration.UnmanagedMotionDll.Name"/> array.</para>
            <para>A third party unmanaged implementation of the Meteor Motion Integration interface is expected to be called MotionController.dll</para>
            </summary>
            <param name="index">Zero to run MotionController.dll</param>
            <param name="logClientCommands">If set, log the MMI commands sent to the plugin from the MMI client, and the plugin's responses.
                                           The log messages are sent to the console and the output message pipe (which can be consumed independently by the client)</param>
            <param name="setMmiLogDelgate"></param>
            <returns><see cref="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.OK"/>on success, or one of the <see cref="T:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR"/> error codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.RunWithAssemblySearch(System.Boolean,System.Boolean,System.String)">
            <summary>
            Start the Swath IPC server, which receives motion controller commands from Meteor applications.
            The server should be started using RunWithAssemblySearch if a third party managed DLL is providing
            the integration to the motion control sub-system.
            <para>Unless <paramref name="fileName"/> is set, all assemblies within the same folder that MotionIntegrationCLS is being run from 
                  are searched to find one which implements an IMotion object, and only one such object should be present</para>
            </summary>
            <param name="logClientCommands">If set, log the MMI commands sent to the plugin from the MMI client, and the plugin's responses.
                                           The log messages are sent to the console and the output message pipe (which can be consumed independently by the client)</param>
            <param name="setMmiLogDelegate">If set, and the MMI plugin supports the <see cref="T:Ttp.Meteor.MotionIntegration.ILoggable"/> interface, the <see cref="P:Ttp.Meteor.MotionIntegration.SwathIPCServer.LogDelegate"/>
                                            is sent to the plugin, allowing it to pipe messages back to the server and hence the client application</param>
            <param name="fileName">Explicit assembly name to load, or an empty string to automatically search the directory.</param>
            <returns><see cref="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.OK"/>on success, or one of the <see cref="T:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR"/> error codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.Run">
            <summary>
            Run the server.  The _Motion object must have been set up by this point, via one of the above methods.
            </summary>
            <returns><see cref="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.OK"/>on success, or one of the <see cref="T:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR"/> error codes</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.Stop">
            <summary>
            Stop the server
            </summary>
            <returns>
            <see cref="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.OK"/>on success; 
            <see cref="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.NOT_RUNNING"/> or <see cref="F:Ttp.Meteor.MotionIntegration.MMI_SERVER_ERROR.ALREADY_STOPPING"/> on error.</returns>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.ServerThreadMain">
            <summary>
            Main loop of the server thread.  When both the command and response pipes are
            connected, dispatches messages from the command thread to asynchronous tasks.
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.ClosePipes">
            <summary>
            Close and release all pipe resources
            </summary>
        </member>
        <member name="M:Ttp.Meteor.MotionIntegration.SwathIPCServer.HandlePipeInput(Ttp.Meteor.MotionIntegration.SwathIPCPipeRead)">
            <summary>
            Handle an IMethod call received on the command pipe.
            Each command runs in a dedicated thread.
            </summary>
        </member>
    </members>
</doc>
